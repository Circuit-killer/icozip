################################################################################
##
## Filename: 	busconsole.txt
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=wbu
@ACCESS=WBUBUS_MASTER
@MTYPE=HOST
@TOP.PORTLIST=
		// Parallel port to wishbone / console interface
		i_pp_dir, i_pp_clk, io_pp_data, o_pp_clkfb
@TOP.IODECL=
	// Parallel port to wishbone / console interface
	input	wire		i_pp_dir, i_pp_clk;
	inout	wire	[7:0]	io_pp_data;
	output	wire		o_pp_clkfb;
@TOP.DEFNS=
	//
	//
	// Parallel port interface
	//
	//
	wire	[7:0]	rx_data, tx_data, i_pp_data, w_pp_data;
	wire		rx_stb, tx_stb, tx_busy;

@TOP.INSERT=
	// Parallel port logic
	pport	@$(PREFIX)i_pp(s_clk,
			rx_stb, rx_data,
			tx_stb, tx_data, tx_busy,
			i_pp_dir, i_pp_clk, i_pp_data, w_pp_data,
				o_pp_clkfb);
	//
	// Parallel port I/O pin control
	ppio	@$(PREFIX)i_io(i_pp_dir, io_pp_data, w_pp_data, i_pp_data);

@TOP.MAIN=
		// External USB-UART bus control
		rx_stb, rx_data, tx_stb, tx_data, tx_busy
@MAIN.PORTLIST=
		// Command and Control port
		i_host_rx_stb, i_host_rx_data,
		o_host_tx_stb, o_host_tx_data, i_host_tx_busy
@MAIN.IODECL=
	input	wire		i_host_rx_stb;
	input	wire	[7:0]	i_host_rx_data;
	output	wire		o_host_tx_stb;
	output	wire	[7:0]	o_host_tx_data;
	input	wire		i_host_tx_busy;
@MAIN.DEFNS=
	// Definitions for the WB-UART converter.  We really only need one
	// (more) non-bus wire--one to use to select if we are interacting
	// with the ZipCPU or not.
	wire		wbu_zip_sel;
	wire	[0:0]	wbubus_dbg;
`ifndef	INCLUDE_ZIPCPU
	wire		zip_dbg_ack, zip_dbg_stall;
	wire	[31:0]	zip_dbg_data;
`endif
@$ZIP_ADDRESS_BIT=@$BUS_ADDRESS_WIDTH-1
@$ZIP_ADDRESS=(1<<(@$.ZIP_ADDRESS_BIT+2))
@ZIP_ADDRESS.FORMAT= 0x%08x
@$ZIP_DBGDATA=4+@$.ZIP_ADDRESS
@ZIP_DBGDATA.FORMAT= 0x%08x
@MAIN.INSERT=
`ifdef	INCLUDE_ZIPCPU
	assign	wbu_zip_sel   = wbu_addr[@$.ZIP_ADDRESS_BIT];
`else
	assign	wbu_zip_sel   = 1'b0;
	assign	zip_dbg_ack   = 1'b0;
	assign	zip_dbg_stall = 1'b0;
	assign	zip_dbg_data  = 0;
`endif
`ifndef	BUSPIC_ACCESS
	wire	w_bus_int;
	assign	w_bus_int = 1'b0;
`endif
	wire	[31:0]	wbu_tmp_addr;
	wbuconsole genbus(i_clk, i_host_rx_stb, i_host_rx_data,
			wbu_cyc, wbu_stb, wbu_we, wbu_tmp_addr, wbu_data,
			(wbu_zip_sel)?zip_dbg_ack:wbu_ack,
			(wbu_zip_sel)?zip_dbg_stall:wbu_stall,
				(wbu_zip_sel)?1'b0:wbu_err,
				(wbu_zip_sel)?zip_dbg_data:wbu_idata,
			w_bus_int,
			o_host_tx_stb, o_host_tx_data, i_host_tx_busy,
			//
			w_console_tx_stb, w_console_tx_data, w_console_busy,
			w_console_rx_stb, w_console_rx_data,
			//
			wbubus_dbg[0]);
	assign	wbu_sel = 4'hf;
	assign	wbu_addr = wbu_tmp_addr[(@$BUS_ADDRESS_WIDTH-1):0];
@REGDEFS.H.DEFNS=
#define	R_ZIPCTRL	@$.ZIP_ADDRESS
#define	R_ZIPDATA	@$.ZIP_DBGDATA
#define	RESET_ADDRESS	@$[0x%08x](RESET_ADDRESS)
@SIM.INCLUDE=
#include "dblpipecmdr.h"
@SIM.DEFINES=
#define	PARENT	DBLPIPECMDR<BASECLASS>
#
#
#
#
#
@PREFIX=uart
@NADDR=	4
@PTYPE=	OTHER
@ACCESS= BUSCONSOLE_ACCESS
@INT.UARTRX.WIRE=uartrx_int
@INT.UARTTX.WIRE=uarttx_int
@INT.UARTRXF.WIRE=uartrxf_int
@INT.UARTTXF.WIRE=uarttxf_int
@INT.UARTRX.PIC=
@INT.UARTTX.PIC=
@INT.UARTRXF.PIC= buspic
@INT.UARTTXF.PIC= buspic
@MAIN.DEFNS=
	// Console definitions
	wire	w_console_rx_stb, w_console_tx_stb, w_console_busy;
	wire	[6:0]	w_console_rx_data, w_console_tx_data;
@MAIN.INSERT=
	wbconsole console(i_clk, 1'b0,
 			wb_cyc, (wb_stb)&&(uart_sel), wb_we,
				wb_addr[1:0], wb_data,
 			uart_ack, uart_stall, uart_data,
			w_console_tx_stb, w_console_tx_data, w_console_busy,
			w_console_rx_stb, w_console_rx_data,
			uartrx_int, uarttx_int, uartrxf_int, uarttxf_int);
@REGS.NOTE = // CONSOLE registers
@REGS.N = 3
## This is unused @REGS.0 = 0 R_CONSOLE_SETUP	 USETUP
@REGS.0 = 1 R_CONSOLE_FIFO	 UFIFO
@REGS.1 = 2 R_CONSOLE_UARTRX	 RX
@REGS.2 = 3 R_CONSOLE_UARTTX	 TX

@BDEF.DEFN =
typedef struct  CONSOLE_S {
	unsigned	u_setup;
	unsigned	u_fifo;
	unsigned	u_rx, u_tx;
} CONSOLE;

@BDEF.IONAME= io_console
@BDEF.IOTYPE= CONSOLE
@BDEF.OSDEF=	_BOARD_HAS_BUSCONSOLE
@BDEF.OSVAL=static volatile CONSOLE *const _uart = ((CONSOLE *)@$.BASE);
@RTL.MAKE.GROUP= WBUBUS
@RTL.MAKE.SUBD= wbubus
@RTL.MAKE.FILES= wbuconsole.v wbufifo.v wbucompactlines.v wbucompress.v
	wbudecompress.v wbudeword.v wbuexec.v wbuidleint.v wbuinput.v
	wbuoutput.v wbureadcw.v wbusixchar.v wbutohex.v wbconsole.v
@PREFIX=pport
@RTL.MAKE.GROUP= PPORT
@RTL.MAKE.SUBD=../pport
@RTL.MAKE.FILES= ppio.v pport.v ufifo.v
